fScatter = data.frame("PCA1" = pcaData[[1]],
"PCA2" = pcaData[[2]],
"Colors" = createColors(object))
fSetData = fData(object)
for (i in 1:length((fSetData))){
if (i == 1){
p = data.frame(fSetData[[i]])
} else {
p = data.frame(p, fSetData[[i]])
}
}
#filtering forbidden keys
originalNames = names(fSetData)
originalNames = gsub("\\$","-", originalNames)
originalNames = gsub("\\#","-", originalNames)
originalNames = gsub("\\]","-", originalNames)
originalNames = gsub("\\[","-", originalNames)
originalNames = gsub("\\/","-", originalNames)
originalNames = gsub("\\.","-", originalNames)
names(p) = originalNames
#  p = cbind(p, data.frame("id" = row.names(fSetData)))
exprsSet = exprs(object)
exprsSet = cbind(exprsSet, data.frame("id" = row.names(exprsSet)))
row.names(exprsSet) = NULL
originalNames2 = names(exprsSet)
originalNames2 = gsub("\\$","-", originalNames2)
originalNames2 = gsub("\\#","-", originalNames2)
originalNames2 = gsub("\\]","-", originalNames2)
originalNames2 = gsub("\\[","-", originalNames2)
originalNames2 = gsub("\\/","-", originalNames2)
originalNames2 = gsub("\\.","-", originalNames2)
names(exprsSet) = originalNames2
fSet = cbind(fScatter,p,exprsSet)
pRolocList = list("fSet" = fSet, "exprsSet" = exprsSet)
return(pRolocList)
}
pRolocFData(E14TG2aR)
for (i in b) {
data(list = i)
pRolocData = pRolocUpload(dataset = i,name = i)
}
Q
Q
Q
object = E14TG2aR
fData(object)
exprs(object)
col.names(exprs(object))
colnames(exprs(object))
toJSON(colnames(exprs(object)))
pRolocMetaFrame <- function(object, varName){
#meta
#varName = "varName"
title =  object@experimentData@title
author = object@experimentData@name
email = object@experimentData@email
contact = object@experimentData@contact
dataStamp = object@experimentData@dateStamp
abstract = object@experimentData@abstract
lab = object@experimentData@lab
pubMedIds = object@experimentData@pubMedIds
tissue = object@experimentData@samples$tissue
cellLine = object@experimentData@samples$cellLine
species = object@experimentData@samples$species
operator = object@experimentData@samples$operator
markerClasses = toString(pRoloc::getMarkerClasses(object))
featureNames = toString(featureNames(object))
profileColumns = colnames(exprs(object))
#List generation
pRolocList = list("varName" = varName,
"title" = title,
"author" = author,
"email" = email,
"contact" = contact,
"dataStamp" = dataStamp,
"abstract" = abstract,
"lab" = lab,
"pubMedIds" = pubMedIds,
"tissue" = tissue,
"cellLine" = cellLine,
"species" = species,
"operator" = operator,
"markerClasses" = markerClasses,
"featureNames" = featureNames,
"profileColumns" = profileColumns
)
return(pRolocList)
}
for (i in b) {
data(list = i)
pRolocData = pRolocUpload(dataset = i,name = i)
}
pRolocFData <- function(object){
pcaData = as.data.frame(plot2D(object, plot = FALSE))
fScatter = data.frame("PCA1" = pcaData[[1]],
"PCA2" = pcaData[[2]],
"Colors" = createColors(object))
fSetData = fData(object)
for (i in 1:length((fSetData))){
if (i == 1){
p = data.frame(fSetData[[i]])
} else {
p = data.frame(p, fSetData[[i]])
}
}
#filtering forbidden keys
originalNames = names(fSetData)
originalNames = gsub("\\$","-", originalNames)
originalNames = gsub("\\#","-", originalNames)
originalNames = gsub("\\]","-", originalNames)
originalNames = gsub("\\[","-", originalNames)
originalNames = gsub("\\/","-", originalNames)
originalNames = gsub("\\.","-", originalNames)
names(p) = originalNames
#p = cbind(p, data.frame("id" = row.names(fSetData)))
exprsSet = exprs(object)
exprsSet = cbind(exprsSet, data.frame("id" = row.names(exprsSet)))
row.names(exprsSet) = NULL
originalNames2 = names(exprsSet)
originalNames2 = gsub("\\$","-", originalNames2)
originalNames2 = gsub("\\#","-", originalNames2)
originalNames2 = gsub("\\]","-", originalNames2)
originalNames2 = gsub("\\[","-", originalNames2)
originalNames2 = gsub("\\/","-", originalNames2)
originalNames2 = gsub("\\.","-", originalNames2)
names(exprsSet) = originalNames2
fSet = cbind(fScatter,p,exprsSet)
pRolocList = list("fSet" = fSet)
return(pRolocList)
}
warnings()
pRolocFData <- function(object){
pcaData = as.data.frame(plot2D(object, plot = FALSE))
fScatter = data.frame("PCA1" = pcaData[[1]],
"PCA2" = pcaData[[2]],
"Colors" = createColors(object))
fSetData = fData(object)
for (i in 1:length((fSetData))){
if (i == 1){
p = data.frame(fSetData[[i]])
} else {
p = data.frame(p, fSetData[[i]])
}
}
#filtering forbidden keys
originalNames = names(fSetData)
originalNames = gsub("\\$","-", originalNames)
originalNames = gsub("\\#","-", originalNames)
originalNames = gsub("\\]","-", originalNames)
originalNames = gsub("\\[","-", originalNames)
originalNames = gsub("\\/","-", originalNames)
originalNames = gsub("\\.","-", originalNames)
names(p) = originalNames
#p = cbind(p, data.frame("id" = row.names(fSetData)))
exprsSet = exprs(object)
exprsSet = cbind(exprsSet, data.frame("id" = row.names(exprsSet)))
row.names(exprsSet) = NULL
originalNames2 = names(exprsSet)
originalNames2 = gsub("\\$","-", originalNames2)
originalNames2 = gsub("\\#","-", originalNames2)
originalNames2 = gsub("\\]","-", originalNames2)
originalNames2 = gsub("\\[","-", originalNames2)
originalNames2 = gsub("\\/","-", originalNames2)
originalNames2 = gsub("\\.","-", originalNames2)
names(exprsSet) = originalNames2
fSet = cbind(fScatter,p,exprsSet)
pRolocList = list("fSet" = fSet)
return(pRolocList)
}
path = "/raw"
path3 = "/data"
path2 = "/meta"
path4 = "/keys"
PUT(paste0(dbURL,path,".json"), body = toJSON(mtcars))
PUT(paste0(dbURL,path2,".json"), body = toJSON(mtcars))
PUT(paste0(dbURL,path3,".json"), body = toJSON(mtcars))
PUT(paste0(dbURL,path4,".json"), body = toJSON(mtcars))
b
for (i in b) {
data(list = i)
pRolocData = pRolocUpload(dataset = i,name = i)
}
exprs(object)
fData(object)
library(pRolocdata)
pRolocdata()
data("nikolovski2012")
nikolovski2012
fData(nikolovski2012)
fSet(nikolovski2012)
fData(nikolovski2012)
exprs(nikolovski2012)
plot2D(nikolovski2012)
plot2D(nikolovski2012)
plot2D(nikolovski2012,addLegend = TRUE)
?plot2D
addLegend(nikolovski2012)
plot2D(nikolovski2012imp,addLegend = TRUE)
addLegend(nikolovski2012imp)
pRolocdata()
data = GET(url = "https://api.bitfinex.com/v1/pubticker/BTCUSD")
content(data)
as.data.frame(content(data))
data = GET(url = "https://api.bitfinex.com/v1/pubticker/BTCUSD")
as.data.frame(content(data))
setwd("C:/Users/Robpre/FireData")
library(fireData)
devtools::test()
covr::package_coverage()
test_check("fireData")
test_check("FireData")
test_check("fireData")
test_check("fireData")
test_check("fireData")
devtools::test()
test_package("testthat")
test_package("fireData")
test_check("fireData")
covr::package_coverage()
covr::test_coverage()
covr::code_coverage()
covr::codecov()
codecov(token="065e3977-f8e1-4ce8-b984-6c1b8de579e6")
covr::codecov(token="065e3977-f8e1-4ce8-b984-6c1b8de579e6")
fireData::upload(mtcars,"https://firedata-efa5a.firebaseio.com",directory = "test")
fireData::upload(mtcars,"https://firedata-efa5a.firebaseio.cosm",directory = "test")
response = fireData::upload(mtcars,"https://firedata-efa5a.firebaseio.com",directory = "test")
response
content(response)
names(response)
names(response) == "name"
fireData::download("https://firedata-efa5a.firebaseio.com","test","KnsrqkNIDOFa993pcI9")
fireData::download("https://firedata-efa5a.firebaseio.com","test/KnsrqkNIDOFa993pcI9")
fireData::download("https://firedata-efa5a.firebaseio.com/test","KnsrqkNIDOFa993pcI9")
> response = fireData::upload(mtcars,"https://firedata-efa5a.firebaseio.com",directory = "test")
response = fireData::upload(mtcars,"https://firedata-efa5a.firebaseio.com",directory = "test")
response
fireData::download("https://firedata-efa5a.firebaseio.com/directory","KnsrqkNIDOFa993pcI9")
fireData::download("https://firedata-efa5a.firebaseio.com/directory","-KnsrqkNIDOFa993pcI9")
response = fireData::download("https://firedata-efa5a.firebaseio.com/directory","-KnsrqkNIDOFa993pcI9")
response
toJSON(response)
jsonlite::toJSON(response)
content(response)
response = fireData::download("https://firedata-efa5a.firebaseio.com/directory","-KnsrqkNIDOFa993pcI9")
response
fromJSON(response)
a = fromJSON(response)
is.data.frame(a)
devtools::test()
covr::codecov(token="065e3977-f8e1-4ce8-b984-6c1b8de579e6")
covr::code_coverage()
covr::package_coverage()
classConversion(mtcars)
a = classConversion(mtcars)
a$base64Set
length(a$base64Set)
nchar(a$base64Set)
fireData:::classConversion(mtcars)
conversion = fireData:::classConversion(mtcars)
expect_equal(nchar(conversion$base64Set), 1646)
conversion = fireData:::classConversion(mtcars)
nchar(conversion$base64Set)
devtools::test()
resetPassword(projectAPI = projectAPI, email = wrong@FireDataemail.com)
projectAPI = "AIzaSyAjZLO9-CRV3gObpwdFz-k8AiTOxHSBmdc"
resetPassword(projectAPI = projectAPI, email = wrong@FireDataemail.com)
resetPassword(projectAPI = "AIzaSyAjZLO9-CRV3gObpwdFz-k8AiTOxHSBmdc" , email = wrong@FireDataemail.com)
resetPassword(projectAPI = "AIzaSyAjZLO9-CRV3gObpwdFz-k8AiTOxHSBmdc" , email = "wrong@FireDataemail.com")
resetPassword(projectAPI = "AIzaSyAjZLO9-CRV3gObpwdFz-k8AiTOxHSBmdc" , email = "robin@kohze2.com")
resetPassword(projectAPI = "AIzaSyAjZLO9-CRV3gObpwdFz-k8AiTOxHSBmdc" , email = "testacc@firedata.com")
Sys.time()
as.numeric(Sys.time())*1000, digits=15)
as.numeric(Sys.time())*1000
as.numeric(Sys.time())*1000*1
as.numeric(format(Sys.time(), "%OS3")) * 1000
createUser(projectAPI = projectAPI, email = paste0("testMail", as.numeric(format(Sys.time(), "%OS3")) * 1000), password = "12341234" )
createUser(projectAPI = projectAPI, email = paste0("testMail", as.numeric(format(Sys.time(), "%OS3")) * 1000, "@googleMail.com"), password = "12341234" )
names(createUser(projectAPI = projectAPI, email = paste0("testMail", as.numeric(format(Sys.time(), "%OS3")) * 1000, "@googleMail.com"), password = "12341234" )()
)
names(createUser(projectAPI = projectAPI, email = paste0("testMail", as.numeric(format(Sys.time(), "%OS3")) * 1000, "@googleMail.com"), password = "12341234" ))
"email" %in% names(createUser(projectAPI = projectAPI, email = paste0("testMail", as.numeric(format(Sys.time(), "%OS3")) * 1000, "@googleMail.com"), password = "12341234" ))
devtools::test()
covr::codecov(token="065e3977-f8e1-4ce8-b984-6c1b8de579e6")
iotaUSD = GET(url = "https://api.bitfinex.com/v1/pubticker/IOTAUSD")
iotaUSD
conetent(iotaUSD)
content(iotaUSD)
BTCUSD = GET(url = "https://api.bitfinex.com/v1/pubticker/BTCUSD")
Ticker = GET(url = "https://api.bitfinex.com/v2/tickers?symbols=tBTCUSD, tETHUSD,tIOTAUSD")
Ticker
content(Ticker)
fromJSON(Ticker)
xml2::read_xml(Ticker)
xml2::xml_contents(Ticker)
content(Ticker,as = "raw")
content(Ticker,as = "text")
BTCUSD = GET(url = "https://api.bitfinex.com/v1/pubticker/BTCUSD")
ETHUSD = GET(url = "https://api.bitfinex.com/v1/pubticker/ETHUSD")
ETHUSD = GET(url = "https://api.bitfinex.com/v1/pubticker/ETHUSD")
ETHUSD
content(ETHUSD)
BTCUSD = content(GET(url = "https://api.bitfinex.com/v1/pubticker/BTCUSD"))
ETHUSD = content(GET(url = "https://api.bitfinex.com/v1/pubticker/ETHUSD"))
ETHUSD = content(GET(url = "https://api.bitfinex.com/v1/pubticker/ETHUSD"))
ETHUSD
BTCUSD = content(GET(url = "https://api.bitfinex.com/v1/pubticker/BTCUSD"))$mid
ETHUSD = content(GET(url = "https://api.bitfinex.com/v1/pubticker/ETHUSD"))$mid
ETHUSD = content(GET(url = "https://api.bitfinex.com/v1/pubticker/ETHUSD"))$mid
ETHUSD
IOTAUSD = content(GET(url = "https://api.bitfinex.com/v1/pubticker/IOTAUSD"))$mid
IOTAUSD
ETHUSD * 0.001359
as.numeric(ETHUSD) * 0.001359
as.numeric(BTCUSD) * 0.0001538
IOTAUSD = GET(url = "https://api.bitfinex.com/v2/tickers?symbols=tBTCUSD,tLTCUSD,fUSD")
IOTAUSD
contentIOTAUSD
content(IOTAUSD)
IOTAUSD = GET(url = "https://api.bitfinex.com/v2/tickers?symbols=tIOTAUSD")
IOTAUSD
content(IOTAUSD)
IOTAUSD = GET(url = "https://api.bitfinex.com/v2/tickers?symbols=tBTCUSD")
IOTAUSD
content(IOTAUSD)
67400*0.001478
67400*0.001578
67400*0.001548
BTCETH = content(GET(url = "https://api.bitfinex.com/v1/pubticker/BTCETH"))$mid
BTCETH
BTCETH = content(GET(url = "https://api.bitfinex.com/v1/pubticker/ETHBTC"))$mid
BTCETH
BTCUSD = content(GET(url = "https://api.bitfinex.com/v1/pubticker/BTCUSD"))$mid
ETHUSD = content(GET(url = "https://api.bitfinex.com/v1/pubticker/ETHUSD"))$mid
IOTAUSD = content(GET(url = "https://api.bitfinex.com/v1/pubticker/IOTAUSD"))$mid
BTCUSD/ETHUSD
BTCUSD = as.numeric(content(GET(url = "https://api.bitfinex.com/v1/pubticker/BTCUSD"))$mid)
ETHUSD = as.numeric(content(GET(url = "https://api.bitfinex.com/v1/pubticker/ETHUSD"))$mid)
IOTAUSD = as.numeric(content(GET(url = "https://api.bitfinex.com/v1/pubticker/IOTAUSD"))$mid)
BTCETH = as.numeric(content(GET(url = "https://api.bitfinex.com/v1/pubticker/ETHBTC"))$mid)
BTCUSD/ETHUSD
ETHUSD/BTCUSD
BTCUSD = as.numeric(content(GET(url = "https://api.bitfinex.com/v1/pubticker/BTCUSD"))$mid)
ETHUSD = as.numeric(content(GET(url = "https://api.bitfinex.com/v1/pubticker/ETHUSD"))$mid)
IOTAUSD = as.numeric(content(GET(url = "https://api.bitfinex.com/v1/pubticker/IOTAUSD"))$mid)
BTCETH = as.numeric(content(GET(url = "https://api.bitfinex.com/v1/pubticker/ETHBTC"))$mid)
BTCETH
ETHUSD/BTCUSD
(ETHUSD/BTCUSD)/BTCETH
marginAnalysis = function(){
BTCUSD = as.numeric(content(GET(url = "https://api.bitfinex.com/v1/pubticker/BTCUSD"))$mid)
ETHUSD = as.numeric(content(GET(url = "https://api.bitfinex.com/v1/pubticker/ETHUSD"))$mid)
BTCETH = as.numeric(content(GET(url = "https://api.bitfinex.com/v1/pubticker/ETHBTC"))$mid)
margin = (ETHUSD/BTCUSD)/BTCETH
if(margin <= 0.099 || margin >= 1.01) print(paste0("trade now ", margin))
}
marginAnalysis()
while(true){
marginAnalysis()
Sys.sleep(1)
}
marginAnalysis()
for(i in 1:1000){
marginAnalysis()
Sys.sleep(1)
}
marginAnalysis = function(){
BTCUSD = as.numeric(content(GET(url = "https://api.bitfinex.com/v1/pubticker/BTCUSD"))$mid)
ETHUSD = as.numeric(content(GET(url = "https://api.bitfinex.com/v1/pubticker/ETHUSD"))$mid)
BTCETH = as.numeric(content(GET(url = "https://api.bitfinex.com/v1/pubticker/ETHBTC"))$mid)
margin = (ETHUSD/BTCUSD)/BTCETH
if(margin <= 0.099 || margin >= 1.01) print(paste0("trade now ", margin))
print(margin)
}
for(i in 1:1000){
marginAnalysis()
Sys.sleep(1)
}
marginAnalysis = function(){
BTCUSD = as.numeric(content(GET(url = "https://api.bitfinex.com/v1/pubticker/BTCUSD"))$mid)
ETHUSD = as.numeric(content(GET(url = "https://api.bitfinex.com/v1/pubticker/ETHUSD"))$mid)
BTCETH = as.numeric(content(GET(url = "https://api.bitfinex.com/v1/pubticker/ETHBTC"))$mid)
margin = (ETHUSD/BTCUSD)/BTCETH
if(margin <= 0.099 || margin >= 1.01) print("trade now")
print(margin)
}
for(i in 1:1000){
marginAnalysis()
Sys.sleep(1)
}
for(i in 1:1000){
marginAnalysis()
Sys.sleep(2)
}
arbitrageAnalysis = function(){
BTCUSD = as.numeric(content(GET(url = "https://api.bitfinex.com/v1/pubticker/BTCUSD"))$mid)
ETHUSD = as.numeric(content(GET(url = "https://api.bitfinex.com/v1/pubticker/ETHUSD"))$mid)
BTCETH = as.numeric(content(GET(url = "https://api.bitfinex.com/v1/pubticker/ETHBTC"))$mid)
margin = (ETHUSD/BTCUSD)/BTCETH
if(margin <= 0.099 || margin >= 1.01) print("trade now")
print(margin)
}
for(i in 1:1000){
arbitrageAnalysis()
Sys.sleep(2)
}
arbitrageAnalysis = function(){
BTCUSD = as.numeric(content(GET(url = "https://api.bitfinex.com/v1/pubticker/BTCUSD"))$mid)
ETHUSD = as.numeric(content(GET(url = "https://api.bitfinex.com/v1/pubticker/ETHUSD"))$mid)
BTCETH = as.numeric(content(GET(url = "https://api.bitfinex.com/v1/pubticker/ETHBTC"))$mid)
margin = (ETHUSD/BTCUSD)/BTCETH
if(margin <= 0.0098 || margin >= 1.002) print("trade now")
print(margin)
}
for(i in 1:1000){
arbitrageAnalysis()
Sys.sleep(2)
}
arbitrageAnalysis = function(){
BTCUSD = as.numeric(content(GET(url = "https://api.bitfinex.com/v1/pubticker/BTCUSD"))$mid)
ETHUSD = as.numeric(content(GET(url = "https://api.bitfinex.com/v1/pubticker/ETHUSD"))$mid)
BTCETH = as.numeric(content(GET(url = "https://api.bitfinex.com/v1/pubticker/ETHBTC"))$mid)
margin = (ETHUSD/BTCUSD)/BTCETH
if(margin <= 0.0096 || margin >= 1.004) print("trade now")
print(margin)
}
for(i in 1:1000){
arbitrageAnalysis()
Sys.sleep(2)
}
for(i in 1:1000){
arbitrageAnalysis()
Sys.sleep(2)
}
67450.08*0.44+62.69*300+1000*0.25
67450.08*0.42+62.69*300+1000*0.25
67450.08*0.42+62.69*290+1000*0.25
DataBackup(projectURL = "https://firedata-efa5a.firebaseio.com",secretKey = "2bYA6k72wKna90MqPGa6yuMG7jAysoDJZwJqYXsm", "test.json")
a = DataBackup(projectURL = "https://firedata-efa5a.firebaseio.com",secretKey = "2bYA6k72wKna90MqPGa6yuMG7jAysoDJZwJqYXsm", "test.json")
a
nchar(a)
devtools::test()
covr::codecov(token="065e3977-f8e1-4ce8-b984-6c1b8de579e6")
covr::codecov(token="065e3977-f8e1-4ce8-b984-6c1b8de579e6")
covr::package_coverage()
covr::function_coverage()
covr::zero_coverage()
covr::zero_coverage(x = covr::package_coverage())
devtools::test()
devtools::test()
isS4(iris)
isClass(mtcars)
isClass("mtcars")
isClass("iris")
setClass("student", slots=list(name="character", age="numeric", GPA="numeric"))
s <- new("student",name="John", age=21, GPA=3.5)
s
isS4(s)
setClass("testClass", slots=list(name = "character"))
testClassObject = new("testClass", name = "testName")
testClassObject
isS4(testClassObject)
response = fireData::download("https://firedata-efa5a.firebaseio.com/directory","-KnsrqkNIDOFa993pcI9", secretKey = "2bYA6k72wKna90MqPGa6yuMG7jAysoDJZwJqYXsm")
response
devtools::test()
library(roxygen)
roxygen2::roxygenise()
library(fireData)
devtools::test()
covr::codecov(token="065e3977-f8e1-4ce8-b984-6c1b8de579e6")
library(fireData)
for(i in 1:1000){
arbitrageAnalysis()
Sys.sleep(2)
}
a#
a
library(jsonlite)
a = fromJSON("https://gist.github.com/domschiener/ac11dd4481f940856f07ecf4f2a6b5b9")
a = fromJSON("https://gist.githubusercontent.com/domschiener/ac11dd4481f940856f07ecf4f2a6b5b9/raw/8872dd1faae3312e1fc953f5539e5cfefc6cd3a5/Snapshot.json")
a
sum(a$balance)
sum(as.numeric(a$balance))
a$balance = as.numeric(a$balance)
a$balance = a$balance/1000000
which(a$balance > 100000)
length(which(a$balance > 100000))
length(which(a$balance > 90000))
length(which(a$balance > 1000000))
length(which(a$balance > 10000000))
length(which(a$balance > 100000000))
length(which(a$balance > 2583979))
mean(which(a$balance > 2583979))
(which(a$balance > 2583979))
(a$balance > 2583979)
(a$balance > 2583979)
which(a$balance > 2583979)
a$balance[which(a$balance > 2583979)]
mean(a$balance[which(a$balance > 2583979)])
mean(a$balance[which(a$balance > 2583979)])/2.58
median(a$balance[which(a$balance > 2583979)])/2.58
head(a)
length((a$balance[which(a$balance > 1000000)]))
install.packages("lattice")
library(densityplot)
library(lattice)
densityplot(~balance, data = a)
library(ggplot2)
quplot(balance,data = a, geom="density")
qplot(balance,data = a, geom="density")
qplot(head(balance,200),data = a, geom="density")
qplot(balance,data = a, geom="density")
