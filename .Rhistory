as.vector(a[[2]])
b = as.vector(a[[2]])
b[2]
pRolocUpload <- function(dataset, name){
#pRolocMetaData
pRolocMeta = pRolocMetaFrame(eval(as.name(dataset)), varName = name)
Response = POST(paste0(dbURL,"/meta",".json"), body = toJSON(pRolocMeta, auto_unbox = TRUE))
#pRolocRawData
pRolocRaw = pRolocRawData(eval(as.name(dataset)))
PUT(paste0(dbURL,"/raw/",content(Response),".json"), body = toJSON(pRolocRaw, auto_unbox = TRUE))
#pRolocData
pRolocDataVar = pRolocFData(eval(as.name(dataset)))
PUT(paste0(dbURL,"/data/",content(Response),".json"), body = toJSON(pRolocDataVar, auto_unbox = TRUE))
#generateKeys
#keyCollection(eval(as.name(dataset)), content(Response))
#success message
print(paste0(name, " got transfered to firebase."))
}
data
pRolocFData <- function(object){
pcaData = as.data.frame(plot2D(object, plot = FALSE))
fScatter = data.frame("PCA1" = pcaData[[1]],
"PCA2" = pcaData[[2]],
"Colors" = createColors(object))
fSetData = fData(object)
for (i in 1:length((fSetData))){
if (i == 1){
p = data.frame(fSetData[[i]])
} else {
p = data.frame(p, fSetData[[i]])
}
}
#filtering forbidden keys
originalNames = names(fSetData)
originalNames = gsub("\\$","-", originalNames)
originalNames = gsub("\\#","-", originalNames)
originalNames = gsub("\\]","-", originalNames)
originalNames = gsub("\\[","-", originalNames)
originalNames = gsub("\\/","-", originalNames)
originalNames = gsub("\\.","-", originalNames)
names(p) = originalNames
p = cbind(p, data.frame("id" = row.names(fSetData)))
exprsSet = exprs(object)
exprsSet = cbind(exprsSet, data.frame("id" = row.names(exprsSet)))
row.names(exprsSet) = NULL
originalNames2 = names(exprsSet)
originalNames2 = gsub("\\$","-", originalNames2)
originalNames2 = gsub("\\#","-", originalNames2)
originalNames2 = gsub("\\]","-", originalNames2)
originalNames2 = gsub("\\[","-", originalNames2)
originalNames2 = gsub("\\/","-", originalNames2)
originalNames2 = gsub("\\.","-", originalNames2)
names(exprsSet) = originalNames2
fSet = cbind(fScatter,p, exprsSet)
pRolocList = list("fSet" = fSet, "exprsSet" = exprsSet)
return(pRolocList)
}
path = "/raw"
PUT(paste0(dbURL,path,".json"), body = toJSON(mtcars))
PUT(paste0(dbURL,path2,".json"), body = toJSON(mtcars))
path = "/raw"
path2 = "/meta"
path3 = "/data"
PUT(paste0(dbURL,path,".json"), body = toJSON(mtcars))
PUT(paste0(dbURL,path2,".json"), body = toJSON(mtcars))
PUT(paste0(dbURL,path3,".json"), body = toJSON(mtcars))
PUT(paste0(dbURL,path4,".json"), body = toJSON(mtcars))
path4 = "/raw"
PUT(paste0(dbURL,path4,".json"), body = toJSON(mtcars))
path4 = "/keys"
PUT(paste0(dbURL,path4,".json"), body = toJSON(mtcars))
for (i in b) {
pRolocData = pRolocUpload(dataset = i,name = i)
}
library(httr)
library(jsonlite)
library(pRoloc)
library(pRolocdata)
for (i in b) {
pRolocData = pRolocUpload(dataset = i,name = i)
}
E14TG2aR
data("E14TG2aR")
for(i in 1:length(b)) data(i)
pRolocUpload <- function(dataset, name){
#pRolocMetaData
pRolocMeta = pRolocMetaFrame(eval(as.name(dataset)), varName = name)
Response = POST(paste0(dbURL,"/meta",".json"), body = toJSON(pRolocMeta, auto_unbox = TRUE))
#pRolocRawData
pRolocRaw = pRolocRawData(eval(as.name(dataset)))
PUT(paste0(dbURL,"/raw/",content(Response),".json"), body = toJSON(pRolocRaw, auto_unbox = TRUE))
#pRolocData
pRolocDataVar = pRolocFData(eval(as.name(dataset)))
PUT(paste0(dbURL,"/data/",content(Response),".json"), body = toJSON(pRolocDataVar, auto_unbox = TRUE))
#generateKeys
#keyCollection(eval(as.name(dataset)), content(Response))
#success message
print(paste0(name, " got transfered to firebase."))
}
for (i in b) {
pRolocData = pRolocUpload(dataset = i,name = i)
}
b
for (i in b) {
data(i)
pRolocData = pRolocUpload(dataset = i,name = i)
}
sapply(b,data())
sapply(b,data
)
b
data("E14TG2aR")
data("E14TG2aS1")
for (i in b) {
data(i)
pRolocData = pRolocUpload(dataset = i,name = i)
}
Q
pRolocFData <- function(object){
pcaData = as.data.frame(plot2D(object, plot = FALSE))
fScatter = data.frame("PCA1" = pcaData[[1]],
"PCA2" = pcaData[[2]],
"Colors" = createColors(object))
fSetData = fData(object)
for (i in 1:length((fSetData))){
if (i == 1){
p = data.frame(fSetData[[i]])
} else {
p = data.frame(p, fSetData[[i]])
}
}
#filtering forbidden keys
originalNames = names(fSetData)
originalNames = gsub("\\$","-", originalNames)
originalNames = gsub("\\#","-", originalNames)
originalNames = gsub("\\]","-", originalNames)
originalNames = gsub("\\[","-", originalNames)
originalNames = gsub("\\/","-", originalNames)
originalNames = gsub("\\.","-", originalNames)
names(p) = originalNames
p = cbind(p, data.frame("id" = row.names(fSetData)))
exprsSet = exprs(object)
exprsSet = cbind(exprsSet, data.frame("id" = row.names(exprsSet)))
row.names(exprsSet) = NULL
originalNames2 = names(exprsSet)
originalNames2 = gsub("\\$","-", originalNames2)
originalNames2 = gsub("\\#","-", originalNames2)
originalNames2 = gsub("\\]","-", originalNames2)
originalNames2 = gsub("\\[","-", originalNames2)
originalNames2 = gsub("\\/","-", originalNames2)
originalNames2 = gsub("\\.","-", originalNames2)
names(exprsSet) = originalNames2
fSet = cbind(fScatter,p)
pRolocList = list("fSet" = fSet, "exprsSet" = exprsSet)
return(pRolocList)
}
for (i in b) {
data(i)
pRolocData = pRolocUpload(dataset = i,name = i)
}
Q
for (i in b) {
data(eval(as.name(i))
}
for (i in b) {
data(eval(as.name(i)))
}
for (i in b) {
data(as.name(i))
}
for (i in b) {
data((i))
}
for (i in b) {
data(list = i)
}
for (i in b) {
data(list = i)
pRolocData = pRolocUpload(dataset = i,name = i)
}
for (i in b) {
data(list = i)
pRolocData = pRolocUpload(dataset = i,name = i)
}
Q
Q
Q
Q
for (i in b) {
data(list = i)
pRolocData = pRolocUpload(dataset = i,name = i)
}
Q
Q
Q
Q
for (i in b) {
pRolocData = pRolocUpload(dataset = i,name = i)
}
Q
Q
Q
install.packages(c("curl", "httr"))
install.packages(c("curl", "httr"))
for (i in b) {
data(list = i)
pRolocData = pRolocUpload(dataset = i,name = i)
}
for (i in b) {
pRolocData = pRolocUpload(dataset = i,name = i)
}
library(httr)
library(jsonlite)
library(pRoloc)
library(pRolocdata)
for (i in b) {
data(list = i)
pRolocData = pRolocUpload(dataset = i,name = i)
}
Q
pRolocFData <- function(object){
pcaData = as.data.frame(plot2D(object, plot = FALSE))
fScatter = data.frame("PCA1" = pcaData[[1]],
"PCA2" = pcaData[[2]],
"Colors" = createColors(object))
fSetData = fData(object)
for (i in 1:length((fSetData))){
if (i == 1){
p = data.frame(fSetData[[i]])
} else {
p = data.frame(p, fSetData[[i]])
}
}
#filtering forbidden keys
originalNames = names(fSetData)
originalNames = gsub("\\$","-", originalNames)
originalNames = gsub("\\#","-", originalNames)
originalNames = gsub("\\]","-", originalNames)
originalNames = gsub("\\[","-", originalNames)
originalNames = gsub("\\/","-", originalNames)
originalNames = gsub("\\.","-", originalNames)
names(p) = originalNames
p = cbind(p, data.frame("id" = row.names(fSetData)))
exprsSet = exprs(object)
exprsSet = cbind(exprsSet, data.frame("id" = row.names(exprsSet)))
row.names(exprsSet) = NULL
originalNames2 = names(exprsSet)
originalNames2 = gsub("\\$","-", originalNames2)
originalNames2 = gsub("\\#","-", originalNames2)
originalNames2 = gsub("\\]","-", originalNames2)
originalNames2 = gsub("\\[","-", originalNames2)
originalNames2 = gsub("\\/","-", originalNames2)
originalNames2 = gsub("\\.","-", originalNames2)
names(exprsSet) = originalNames2
fSet = cbind(fScatter,p,exprsSet)
pRolocList = list("fSet" = fSet, "exprsSet" = exprsSet)
return(pRolocList)
}
for (i in b) {
data(list = i)
pRolocData = pRolocUpload(dataset = i,name = i)
}
Q
Q
Q
pRolocFData <- function(object){
pcaData = as.data.frame(plot2D(object, plot = FALSE))
fScatter = data.frame("PCA1" = pcaData[[1]],
"PCA2" = pcaData[[2]],
"Colors" = createColors(object))
fSetData = fData(object)
for (i in 1:length((fSetData))){
if (i == 1){
p = data.frame(fSetData[[i]])
} else {
p = data.frame(p, fSetData[[i]])
}
}
#filtering forbidden keys
originalNames = names(fSetData)
originalNames = gsub("\\$","-", originalNames)
originalNames = gsub("\\#","-", originalNames)
originalNames = gsub("\\]","-", originalNames)
originalNames = gsub("\\[","-", originalNames)
originalNames = gsub("\\/","-", originalNames)
originalNames = gsub("\\.","-", originalNames)
names(p) = originalNames
p = cbind(p, data.frame("id" = row.names(fSetData)))
exprsSet = exprs(object)
exprsSet = cbind(exprsSet, data.frame("id" = row.names(exprsSet)))
row.names(exprsSet) = NULL
originalNames2 = names(exprsSet)
originalNames2 = gsub("\\$","-", originalNames2)
originalNames2 = gsub("\\#","-", originalNames2)
originalNames2 = gsub("\\]","-", originalNames2)
originalNames2 = gsub("\\[","-", originalNames2)
originalNames2 = gsub("\\/","-", originalNames2)
originalNames2 = gsub("\\.","-", originalNames2)
names(exprsSet) = originalNames2
fSet = cbind(fScatter,p,exprsSet)
pRolocList = list("fSet" = fSet, "exprsSet" = exprsSet)
return(pRolocList)
}
pRolocFData(E14TG2aR)
pRolocFData <- function(object){
pcaData = as.data.frame(plot2D(object, plot = FALSE))
fScatter = data.frame("PCA1" = pcaData[[1]],
"PCA2" = pcaData[[2]],
"Colors" = createColors(object))
fSetData = fData(object)
for (i in 1:length((fSetData))){
if (i == 1){
p = data.frame(fSetData[[i]])
} else {
p = data.frame(p, fSetData[[i]])
}
}
#filtering forbidden keys
originalNames = names(fSetData)
originalNames = gsub("\\$","-", originalNames)
originalNames = gsub("\\#","-", originalNames)
originalNames = gsub("\\]","-", originalNames)
originalNames = gsub("\\[","-", originalNames)
originalNames = gsub("\\/","-", originalNames)
originalNames = gsub("\\.","-", originalNames)
names(p) = originalNames
#  p = cbind(p, data.frame("id" = row.names(fSetData)))
exprsSet = exprs(object)
exprsSet = cbind(exprsSet, data.frame("id" = row.names(exprsSet)))
row.names(exprsSet) = NULL
originalNames2 = names(exprsSet)
originalNames2 = gsub("\\$","-", originalNames2)
originalNames2 = gsub("\\#","-", originalNames2)
originalNames2 = gsub("\\]","-", originalNames2)
originalNames2 = gsub("\\[","-", originalNames2)
originalNames2 = gsub("\\/","-", originalNames2)
originalNames2 = gsub("\\.","-", originalNames2)
names(exprsSet) = originalNames2
fSet = cbind(fScatter,p,exprsSet)
pRolocList = list("fSet" = fSet, "exprsSet" = exprsSet)
return(pRolocList)
}
pRolocFData(E14TG2aR)
for (i in b) {
data(list = i)
pRolocData = pRolocUpload(dataset = i,name = i)
}
Q
Q
Q
object = E14TG2aR
fData(object)
exprs(object)
col.names(exprs(object))
colnames(exprs(object))
toJSON(colnames(exprs(object)))
pRolocMetaFrame <- function(object, varName){
#meta
#varName = "varName"
title =  object@experimentData@title
author = object@experimentData@name
email = object@experimentData@email
contact = object@experimentData@contact
dataStamp = object@experimentData@dateStamp
abstract = object@experimentData@abstract
lab = object@experimentData@lab
pubMedIds = object@experimentData@pubMedIds
tissue = object@experimentData@samples$tissue
cellLine = object@experimentData@samples$cellLine
species = object@experimentData@samples$species
operator = object@experimentData@samples$operator
markerClasses = toString(pRoloc::getMarkerClasses(object))
featureNames = toString(featureNames(object))
profileColumns = colnames(exprs(object))
#List generation
pRolocList = list("varName" = varName,
"title" = title,
"author" = author,
"email" = email,
"contact" = contact,
"dataStamp" = dataStamp,
"abstract" = abstract,
"lab" = lab,
"pubMedIds" = pubMedIds,
"tissue" = tissue,
"cellLine" = cellLine,
"species" = species,
"operator" = operator,
"markerClasses" = markerClasses,
"featureNames" = featureNames,
"profileColumns" = profileColumns
)
return(pRolocList)
}
for (i in b) {
data(list = i)
pRolocData = pRolocUpload(dataset = i,name = i)
}
pRolocFData <- function(object){
pcaData = as.data.frame(plot2D(object, plot = FALSE))
fScatter = data.frame("PCA1" = pcaData[[1]],
"PCA2" = pcaData[[2]],
"Colors" = createColors(object))
fSetData = fData(object)
for (i in 1:length((fSetData))){
if (i == 1){
p = data.frame(fSetData[[i]])
} else {
p = data.frame(p, fSetData[[i]])
}
}
#filtering forbidden keys
originalNames = names(fSetData)
originalNames = gsub("\\$","-", originalNames)
originalNames = gsub("\\#","-", originalNames)
originalNames = gsub("\\]","-", originalNames)
originalNames = gsub("\\[","-", originalNames)
originalNames = gsub("\\/","-", originalNames)
originalNames = gsub("\\.","-", originalNames)
names(p) = originalNames
#p = cbind(p, data.frame("id" = row.names(fSetData)))
exprsSet = exprs(object)
exprsSet = cbind(exprsSet, data.frame("id" = row.names(exprsSet)))
row.names(exprsSet) = NULL
originalNames2 = names(exprsSet)
originalNames2 = gsub("\\$","-", originalNames2)
originalNames2 = gsub("\\#","-", originalNames2)
originalNames2 = gsub("\\]","-", originalNames2)
originalNames2 = gsub("\\[","-", originalNames2)
originalNames2 = gsub("\\/","-", originalNames2)
originalNames2 = gsub("\\.","-", originalNames2)
names(exprsSet) = originalNames2
fSet = cbind(fScatter,p,exprsSet)
pRolocList = list("fSet" = fSet)
return(pRolocList)
}
warnings()
pRolocFData <- function(object){
pcaData = as.data.frame(plot2D(object, plot = FALSE))
fScatter = data.frame("PCA1" = pcaData[[1]],
"PCA2" = pcaData[[2]],
"Colors" = createColors(object))
fSetData = fData(object)
for (i in 1:length((fSetData))){
if (i == 1){
p = data.frame(fSetData[[i]])
} else {
p = data.frame(p, fSetData[[i]])
}
}
#filtering forbidden keys
originalNames = names(fSetData)
originalNames = gsub("\\$","-", originalNames)
originalNames = gsub("\\#","-", originalNames)
originalNames = gsub("\\]","-", originalNames)
originalNames = gsub("\\[","-", originalNames)
originalNames = gsub("\\/","-", originalNames)
originalNames = gsub("\\.","-", originalNames)
names(p) = originalNames
#p = cbind(p, data.frame("id" = row.names(fSetData)))
exprsSet = exprs(object)
exprsSet = cbind(exprsSet, data.frame("id" = row.names(exprsSet)))
row.names(exprsSet) = NULL
originalNames2 = names(exprsSet)
originalNames2 = gsub("\\$","-", originalNames2)
originalNames2 = gsub("\\#","-", originalNames2)
originalNames2 = gsub("\\]","-", originalNames2)
originalNames2 = gsub("\\[","-", originalNames2)
originalNames2 = gsub("\\/","-", originalNames2)
originalNames2 = gsub("\\.","-", originalNames2)
names(exprsSet) = originalNames2
fSet = cbind(fScatter,p,exprsSet)
pRolocList = list("fSet" = fSet)
return(pRolocList)
}
path = "/raw"
path3 = "/data"
path2 = "/meta"
path4 = "/keys"
PUT(paste0(dbURL,path,".json"), body = toJSON(mtcars))
PUT(paste0(dbURL,path2,".json"), body = toJSON(mtcars))
PUT(paste0(dbURL,path3,".json"), body = toJSON(mtcars))
PUT(paste0(dbURL,path4,".json"), body = toJSON(mtcars))
b
for (i in b) {
data(list = i)
pRolocData = pRolocUpload(dataset = i,name = i)
}
exprs(object)
fData(object)
library(pRolocdata)
pRolocdata()
data("nikolovski2012")
nikolovski2012
fData(nikolovski2012)
fSet(nikolovski2012)
fData(nikolovski2012)
exprs(nikolovski2012)
plot2D(nikolovski2012)
plot2D(nikolovski2012)
plot2D(nikolovski2012,addLegend = TRUE)
?plot2D
addLegend(nikolovski2012)
plot2D(nikolovski2012imp,addLegend = TRUE)
addLegend(nikolovski2012imp)
pRolocdata()
data = GET(url = "https://api.bitfinex.com/v1/pubticker/BTCUSD")
content(data)
as.data.frame(content(data))
data = GET(url = "https://api.bitfinex.com/v1/pubticker/BTCUSD")
as.data.frame(content(data))
setwd("C:/Users/Robpre/FireData")
