}
}
return (CPP_PREDICTED)
}
#Page 2
#make sure all letters are capitalized
L1.1 = "FIILIIGSTSRDHNLEVLHEYVNAAGIT"
L1.2 = "KIIIIDGSTSRDHNLEVLHEYVNAAGIT"
L1.3 = "KNLEILLIIDGSTSRDHNLEVLHEYVNAAGIT"
L1.4 = "NLEIlLIIGSTSRDHNLEVLHEYVNAAGIT"
L1.5 = "MLILLIGSTSRDHNLEVLHEYVNAAGIT"
L1.4 = "NLEILLIIGSTSRDHNLEVLHEYVNAAGIT"
L1.6 = "MIILIIMGVADLIKKFESISKEE"
L1.7 = "PLILLRLLRGSTSRDHNLEVLHEYVNAAGIT"
L1.8 = "FIDIIIKILLIGSTSRDHNLEVLHEYVNAAGIT"
ProteinSet2 = c(L1.1,L1.2,L1.3,L1.4,L1.5,L1.6,L1.6,L1.7,L1.8)
peptify(ProteinSet2, showtrainingset='FALSE', showbackground='true', showplot='true')
# Download R studio at https://www.rstudio.com
# Open PeptideEnvironment.RData
#import all attached .rda files
#with command: load("~/.../data/PP2_CPP.rda") etc. (take your own folder direction)
#coppy full function code beneath (~50 lines) into the console - to create the function peptify in your workspace
peptify <-function(peptide, showplot='true', showtrainingset='true', showaa='false', showbackground='true') {
limits=c(-1,1)
PREDICTED_SPLITTED = c()
PREDICTED_SPLITTED = strsplit(peptide,'')
PP1_PREDICTED=c()
PP2_PREDICTED=c()
CPP_PREDICTED=c()
for (i in 1:length(PREDICTED_SPLITTED)) {
PP1_PREDICTED[i]=mean(DESC[PREDICTED_SPLITTED[[i]][],'PP1'])
PP2_PREDICTED[i]=mean(DESC[PREDICTED_SPLITTED[[i]][],'PP2'])
}
if (showplot) {
plot(PP2_CPP, PP1_CPP,type='n', xlim=c(-1,1), ylim=c(-1,1), xlab="(Hydrophobicity)", ylab="(Polarity)")
if (showbackground) {
xx=c(-1,-0.764, 0.41,-1)
yy=c(-1,-1, 1,1)
polygon(xx,yy,col="#F7DDDC", border=NA)
xx=c(-0.764,1, 1,0.41)
yy=c(-1,-1, 1,1)
polygon(xx,yy,col="#F5EAB3", border=NA)
xx=c(0,1, 1,0)
yy=c(-0.3,-0.3, 1,1)
polygon(xx,yy,col="#D7F2BD", border=NA)
xx=c(-0.47,1, 1,0.71)
yy=c(-1,-1, 1,1)
polygon(xx,yy,col="#D7F2BD", border=NA)
}
if (showtrainingset) {
points(PP2_DECOY[1:5000], PP1_DECOY[1:5000], col = densCols(PP2_DECOY[1:5000], PP1_DECOY[1:5000], nbin = 100, colramp=colorRampPalette(c("#e6b5b5","#610a0a"))), pch=20)
points(PP2_CPP, PP1_CPP, col='#247A0F', pch=20)
}
points(PP2_PREDICTED, PP1_PREDICTED, col='black', pch=20)
if (showaa) {
points(DESC$PP2,DESC$PP1,col='black', pch=2, size=20)
text(DESC$PP2,DESC$PP1,DESC$AA1)
}
}
for (i in 1:length(PREDICTED_SPLITTED)) {
if ((PP2_PREDICTED[i]*1.7 + 0.3)>PP1_PREDICTED[i]) {
CPP_PREDICTED[i]=0
} else {
CPP_PREDICTED[i]=-1
}
if ((PP2_PREDICTED[i]*1.7 - 0.2)>PP1_PREDICTED[i] | PP2_PREDICTED[i]>0) {
CPP_PREDICTED[i]=1
}
}
return (CPP_PREDICTED)
}
#Page 2
#make sure all letters are capitalized
L1.1 = "FIILIIGSTSRDHNLEVLHEYVNAAGIT"
L1.2 = "KIIIIDGSTSRDHNLEVLHEYVNAAGIT"
L1.3 = "KNLEILLIIDGSTSRDHNLEVLHEYVNAAGIT"
L1.4 = "NLEIlLIIGSTSRDHNLEVLHEYVNAAGIT"
L1.5 = "MLILLIGSTSRDHNLEVLHEYVNAAGIT"
L1.4 = "NLEILLIIGSTSRDHNLEVLHEYVNAAGIT"
L1.6 = "MIILIIMGVADLIKKFESISKEE"
L1.7 = "PLILLRLLRGSTSRDHNLEVLHEYVNAAGIT"
L1.8 = "FIDIIIKILLIGSTSRDHNLEVLHEYVNAAGIT"
ProteinSet2 = c(L1.1,L1.2,L1.3,L1.4,L1.5,L1.6,L1.6,L1.7,L1.8)
peptify(ProteinSet2, showtrainingset='FALSE', showbackground='true', showplot='true')
# Download R studio at https://www.rstudio.com
# Open PeptideEnvironment.RData
#import all attached .rda files
#with command: load("~/.../data/PP2_CPP.rda") etc. (take your own folder direction)
#coppy full function code beneath (~50 lines) into the console - to create the function peptify in your workspace
peptify <-function(peptide, showplot='true', showtrainingset='true', showaa='false', showbackground='true') {
limits=c(-1,1)
PREDICTED_SPLITTED = c()
PREDICTED_SPLITTED = strsplit(peptide,'')
PP1_PREDICTED=c()
PP2_PREDICTED=c()
CPP_PREDICTED=c()
for (i in 1:length(PREDICTED_SPLITTED)) {
PP1_PREDICTED[i]=mean(DESC[PREDICTED_SPLITTED[[i]][],'PP1'])
PP2_PREDICTED[i]=mean(DESC[PREDICTED_SPLITTED[[i]][],'PP2'])
}
if (showplot) {
plot(PP2_CPP, PP1_CPP,type='n', xlim=c(-1,1), ylim=c(-1,1), xlab="(Hydrophobicity)", ylab="(Polarity)")
if (showbackground) {
xx=c(-1,-0.764, 0.41,-1)
yy=c(-1,-1, 1,1)
polygon(xx,yy,col="#F7DDDC", border=NA)
xx=c(-0.764,1, 1,0.41)
yy=c(-1,-1, 1,1)
polygon(xx,yy,col="#F5EAB3", border=NA)
xx=c(0,1, 1,0)
yy=c(-0.3,-0.3, 1,1)
polygon(xx,yy,col="#D7F2BD", border=NA)
xx=c(-0.47,1, 1,0.71)
yy=c(-1,-1, 1,1)
polygon(xx,yy,col="#D7F2BD", border=NA)
}
if (showtrainingset) {
points(PP2_DECOY[1:5000], PP1_DECOY[1:5000], col = densCols(PP2_DECOY[1:5000], PP1_DECOY[1:5000], nbin = 100, colramp=colorRampPalette(c("#e6b5b5","#610a0a"))), pch=20)
points(PP2_CPP, PP1_CPP, col='#247A0F', pch=20)
}
points(PP2_PREDICTED, PP1_PREDICTED, col='black', pch=20, size=5)
if (showaa) {
points(DESC$PP2,DESC$PP1,col='black', pch=2, size=20)
text(DESC$PP2,DESC$PP1,DESC$AA1)
}
}
for (i in 1:length(PREDICTED_SPLITTED)) {
if ((PP2_PREDICTED[i]*1.7 + 0.3)>PP1_PREDICTED[i]) {
CPP_PREDICTED[i]=0
} else {
CPP_PREDICTED[i]=-1
}
if ((PP2_PREDICTED[i]*1.7 - 0.2)>PP1_PREDICTED[i] | PP2_PREDICTED[i]>0) {
CPP_PREDICTED[i]=1
}
}
return (CPP_PREDICTED)
}
#Page 2
#make sure all letters are capitalized
L1.1 = "FIILIIGSTSRDHNLEVLHEYVNAAGIT"
L1.2 = "KIIIIDGSTSRDHNLEVLHEYVNAAGIT"
L1.3 = "KNLEILLIIDGSTSRDHNLEVLHEYVNAAGIT"
L1.4 = "NLEIlLIIGSTSRDHNLEVLHEYVNAAGIT"
L1.5 = "MLILLIGSTSRDHNLEVLHEYVNAAGIT"
L1.4 = "NLEILLIIGSTSRDHNLEVLHEYVNAAGIT"
L1.6 = "MIILIIMGVADLIKKFESISKEE"
L1.7 = "PLILLRLLRGSTSRDHNLEVLHEYVNAAGIT"
L1.8 = "FIDIIIKILLIGSTSRDHNLEVLHEYVNAAGIT"
ProteinSet2 = c(L1.1,L1.2,L1.3,L1.4,L1.5,L1.6,L1.6,L1.7,L1.8)
peptify(ProteinSet2, showtrainingset='FALSE', showbackground='true', showplot='true')
# Download R studio at https://www.rstudio.com
# Open PeptideEnvironment.RData
#import all attached .rda files
#with command: load("~/.../data/PP2_CPP.rda") etc. (take your own folder direction)
#coppy full function code beneath (~50 lines) into the console - to create the function peptify in your workspace
peptify <-function(peptide, showplot='true', showtrainingset='true', showaa='false', showbackground='true') {
limits=c(-1,1)
PREDICTED_SPLITTED = c()
PREDICTED_SPLITTED = strsplit(peptide,'')
PP1_PREDICTED=c()
PP2_PREDICTED=c()
CPP_PREDICTED=c()
for (i in 1:length(PREDICTED_SPLITTED)) {
PP1_PREDICTED[i]=mean(DESC[PREDICTED_SPLITTED[[i]][],'PP1'])
PP2_PREDICTED[i]=mean(DESC[PREDICTED_SPLITTED[[i]][],'PP2'])
}
if (showplot) {
plot(PP2_CPP, PP1_CPP,type='n', xlim=c(-1,1), ylim=c(-1,1), xlab="(Hydrophobicity)", ylab="(Polarity)")
if (showbackground) {
xx=c(-1,-0.764, 0.41,-1)
yy=c(-1,-1, 1,1)
polygon(xx,yy,col="#F7DDDC", border=NA)
xx=c(-0.764,1, 1,0.41)
yy=c(-1,-1, 1,1)
polygon(xx,yy,col="#F5EAB3", border=NA)
xx=c(0,1, 1,0)
yy=c(-0.3,-0.3, 1,1)
polygon(xx,yy,col="#D7F2BD", border=NA)
xx=c(-0.47,1, 1,0.71)
yy=c(-1,-1, 1,1)
polygon(xx,yy,col="#D7F2BD", border=NA)
}
if (showtrainingset) {
points(PP2_DECOY[1:5000], PP1_DECOY[1:5000], col = densCols(PP2_DECOY[1:5000], PP1_DECOY[1:5000], nbin = 100, colramp=colorRampPalette(c("#e6b5b5","#610a0a"))), pch=20)
points(PP2_CPP, PP1_CPP, col='#247A0F', pch=20)
}
points(PP2_PREDICTED, PP1_PREDICTED, col='black', pch=20, cex=0.5)
if (showaa) {
points(DESC$PP2,DESC$PP1,col='black', pch=2, size=20)
text(DESC$PP2,DESC$PP1,DESC$AA1)
}
}
for (i in 1:length(PREDICTED_SPLITTED)) {
if ((PP2_PREDICTED[i]*1.7 + 0.3)>PP1_PREDICTED[i]) {
CPP_PREDICTED[i]=0
} else {
CPP_PREDICTED[i]=-1
}
if ((PP2_PREDICTED[i]*1.7 - 0.2)>PP1_PREDICTED[i] | PP2_PREDICTED[i]>0) {
CPP_PREDICTED[i]=1
}
}
return (CPP_PREDICTED)
}
#Page 2
#make sure all letters are capitalized
L1.1 = "FIILIIGSTSRDHNLEVLHEYVNAAGIT"
L1.2 = "KIIIIDGSTSRDHNLEVLHEYVNAAGIT"
L1.3 = "KNLEILLIIDGSTSRDHNLEVLHEYVNAAGIT"
L1.4 = "NLEIlLIIGSTSRDHNLEVLHEYVNAAGIT"
L1.5 = "MLILLIGSTSRDHNLEVLHEYVNAAGIT"
L1.4 = "NLEILLIIGSTSRDHNLEVLHEYVNAAGIT"
L1.6 = "MIILIIMGVADLIKKFESISKEE"
L1.7 = "PLILLRLLRGSTSRDHNLEVLHEYVNAAGIT"
L1.8 = "FIDIIIKILLIGSTSRDHNLEVLHEYVNAAGIT"
ProteinSet2 = c(L1.1,L1.2,L1.3,L1.4,L1.5,L1.6,L1.6,L1.7,L1.8)
peptify(ProteinSet2, showtrainingset='FALSE', showbackground='true', showplot='true')
# Download R studio at https://www.rstudio.com
# Open PeptideEnvironment.RData
#import all attached .rda files
#with command: load("~/.../data/PP2_CPP.rda") etc. (take your own folder direction)
#coppy full function code beneath (~50 lines) into the console - to create the function peptify in your workspace
peptify <-function(peptide, showplot='true', showtrainingset='true', showaa='false', showbackground='true') {
limits=c(-1,1)
PREDICTED_SPLITTED = c()
PREDICTED_SPLITTED = strsplit(peptide,'')
PP1_PREDICTED=c()
PP2_PREDICTED=c()
CPP_PREDICTED=c()
for (i in 1:length(PREDICTED_SPLITTED)) {
PP1_PREDICTED[i]=mean(DESC[PREDICTED_SPLITTED[[i]][],'PP1'])
PP2_PREDICTED[i]=mean(DESC[PREDICTED_SPLITTED[[i]][],'PP2'])
}
if (showplot) {
plot(PP2_CPP, PP1_CPP,type='n', xlim=c(-1,1), ylim=c(-1,1), xlab="(Hydrophobicity)", ylab="(Polarity)")
if (showbackground) {
xx=c(-1,-0.764, 0.41,-1)
yy=c(-1,-1, 1,1)
polygon(xx,yy,col="#F7DDDC", border=NA)
xx=c(-0.764,1, 1,0.41)
yy=c(-1,-1, 1,1)
polygon(xx,yy,col="#F5EAB3", border=NA)
xx=c(0,1, 1,0)
yy=c(-0.3,-0.3, 1,1)
polygon(xx,yy,col="#D7F2BD", border=NA)
xx=c(-0.47,1, 1,0.71)
yy=c(-1,-1, 1,1)
polygon(xx,yy,col="#D7F2BD", border=NA)
}
if (showtrainingset) {
points(PP2_DECOY[1:5000], PP1_DECOY[1:5000], col = densCols(PP2_DECOY[1:5000], PP1_DECOY[1:5000], nbin = 100, colramp=colorRampPalette(c("#e6b5b5","#610a0a"))), pch=20)
points(PP2_CPP, PP1_CPP, col='#247A0F', pch=20)
}
points(PP2_PREDICTED, PP1_PREDICTED, col='black', pch=20, cex=0.7)
if (showaa) {
points(DESC$PP2,DESC$PP1,col='black', pch=2, size=20)
text(DESC$PP2,DESC$PP1,DESC$AA1)
}
}
for (i in 1:length(PREDICTED_SPLITTED)) {
if ((PP2_PREDICTED[i]*1.7 + 0.3)>PP1_PREDICTED[i]) {
CPP_PREDICTED[i]=0
} else {
CPP_PREDICTED[i]=-1
}
if ((PP2_PREDICTED[i]*1.7 - 0.2)>PP1_PREDICTED[i] | PP2_PREDICTED[i]>0) {
CPP_PREDICTED[i]=1
}
}
return (CPP_PREDICTED)
}
#Page 2
#make sure all letters are capitalized
L1.1 = "FIILIIGSTSRDHNLEVLHEYVNAAGIT"
L1.2 = "KIIIIDGSTSRDHNLEVLHEYVNAAGIT"
L1.3 = "KNLEILLIIDGSTSRDHNLEVLHEYVNAAGIT"
L1.4 = "NLEIlLIIGSTSRDHNLEVLHEYVNAAGIT"
L1.5 = "MLILLIGSTSRDHNLEVLHEYVNAAGIT"
L1.4 = "NLEILLIIGSTSRDHNLEVLHEYVNAAGIT"
L1.6 = "MIILIIMGVADLIKKFESISKEE"
L1.7 = "PLILLRLLRGSTSRDHNLEVLHEYVNAAGIT"
L1.8 = "FIDIIIKILLIGSTSRDHNLEVLHEYVNAAGIT"
ProteinSet2 = c(L1.1,L1.2,L1.3,L1.4,L1.5,L1.6,L1.6,L1.7,L1.8)
peptify(ProteinSet2, showtrainingset='FALSE', showbackground='true', showplot='true')
# Download R studio at https://www.rstudio.com
# Open PeptideEnvironment.RData
#import all attached .rda files
#with command: load("~/.../data/PP2_CPP.rda") etc. (take your own folder direction)
#coppy full function code beneath (~50 lines) into the console - to create the function peptify in your workspace
peptify <-function(peptide, showplot='true', showtrainingset='true', showaa='false', showbackground='true') {
limits=c(-1,1)
PREDICTED_SPLITTED = c()
PREDICTED_SPLITTED = strsplit(peptide,'')
PP1_PREDICTED=c()
PP2_PREDICTED=c()
CPP_PREDICTED=c()
for (i in 1:length(PREDICTED_SPLITTED)) {
PP1_PREDICTED[i]=mean(DESC[PREDICTED_SPLITTED[[i]][],'PP1'])
PP2_PREDICTED[i]=mean(DESC[PREDICTED_SPLITTED[[i]][],'PP2'])
}
if (showplot) {
plot(PP2_CPP, PP1_CPP,type='n', xlim=c(-1,1), ylim=c(-1,1), xlab="(Hydrophobicity)", ylab="(Polarity)")
if (showbackground) {
xx=c(-1,-0.764, 0.41,-1)
yy=c(-1,-1, 1,1)
polygon(xx,yy,col="#F7DDDC", border=NA)
xx=c(-0.764,1, 1,0.41)
yy=c(-1,-1, 1,1)
polygon(xx,yy,col="#F5EAB3", border=NA)
xx=c(0,1, 1,0)
yy=c(-0.3,-0.3, 1,1)
polygon(xx,yy,col="#D7F2BD", border=NA)
xx=c(-0.47,1, 1,0.71)
yy=c(-1,-1, 1,1)
polygon(xx,yy,col="#D7F2BD", border=NA)
}
if (showtrainingset) {
points(PP2_DECOY[1:5000], PP1_DECOY[1:5000], col = densCols(PP2_DECOY[1:5000], PP1_DECOY[1:5000], nbin = 100, colramp=colorRampPalette(c("#e6b5b5","#610a0a"))), pch=20)
points(PP2_CPP, PP1_CPP, col='#247A0F', pch=20)
}
points(PP2_PREDICTED, PP1_PREDICTED, col='black', pch=20, cex=0.8)
if (showaa) {
points(DESC$PP2,DESC$PP1,col='black', pch=2, size=20)
text(DESC$PP2,DESC$PP1,DESC$AA1)
}
}
for (i in 1:length(PREDICTED_SPLITTED)) {
if ((PP2_PREDICTED[i]*1.7 + 0.3)>PP1_PREDICTED[i]) {
CPP_PREDICTED[i]=0
} else {
CPP_PREDICTED[i]=-1
}
if ((PP2_PREDICTED[i]*1.7 - 0.2)>PP1_PREDICTED[i] | PP2_PREDICTED[i]>0) {
CPP_PREDICTED[i]=1
}
}
return (CPP_PREDICTED)
}
#Page 2
#make sure all letters are capitalized
L1.1 = "FIILIIGSTSRDHNLEVLHEYVNAAGIT"
L1.2 = "KIIIIDGSTSRDHNLEVLHEYVNAAGIT"
L1.3 = "KNLEILLIIDGSTSRDHNLEVLHEYVNAAGIT"
L1.4 = "NLEIlLIIGSTSRDHNLEVLHEYVNAAGIT"
L1.5 = "MLILLIGSTSRDHNLEVLHEYVNAAGIT"
L1.4 = "NLEILLIIGSTSRDHNLEVLHEYVNAAGIT"
L1.6 = "MIILIIMGVADLIKKFESISKEE"
L1.7 = "PLILLRLLRGSTSRDHNLEVLHEYVNAAGIT"
L1.8 = "FIDIIIKILLIGSTSRDHNLEVLHEYVNAAGIT"
ProteinSet2 = c(L1.1,L1.2,L1.3,L1.4,L1.5,L1.6,L1.6,L1.7,L1.8)
peptify(ProteinSet2, showtrainingset='FALSE', showbackground='true', showplot='true')
peptify(peptideList, showtrainingset='FALSE', showbackground='true', showplot='true')
peptify(peptideList, showtrainingset='FALSE', showbackground='TRUE', showplot='TRUE')
length(mPL)
length(peptideList)
peptify(peptideList, showtrainingset='TRUE', showbackground='TRUE', showplot='TRUE')
a = "ABCSJWEJAJKSDJKSAKDDEF"
pos = gregexpr("ABC",a)
pos
pos = gregexpr("BCS",a)
pos
pos1 = gregexpr("BCS",a)
pos2 = grepexpr("DEF",a)
pos
pos2
pos2 = grepexpr("DEF",a)
pos2 = gregexpr("DEF",a)
pos
pos2
len(a)
length(a)
nchar(a)
pos[1]
pos2[1]
pos2[[1]][1]
pos[[1]][1]
pos2[[1]][1]
nchar(a)
substring(a, seq(1,nchar(a),3), seq(3,nchar(a),3))
substring(a, seq(1,nchar(a),3), seq(3,nchar(a),0))
substring(a, seq(1,nchar(a),3), seq(3,nchar(a),1))
substring(a, seq(1,nchar(a),3), seq(3,nchar(a),3))
b = substring(a, seq(1,nchar(a),3), seq(3,nchar(a),3))
b
which(b=="ABC")
which(b=="EJA")
b
length(b)
sample(1:10,1)
sample(1:10,2)
sample(2:(length(b)-1),2)
sample(2:(length(b)-1),3)
sample(2:(length(b)-1),3)
sample(b,3)
sample(b,3)
b = b[b != ""]
b
sample(2:(length(b)-1),3)
a = "ABCSJWEJAJKSDJKSAKDDEF"
gsub(".*BCS","",a)
a = "ABCSJWEJAJKSDJKSAKDDEF"
startseq="ABC"
gsub(".*BCS","",a)
a = "ABCSJWEJAJKSDJKSAKDDEF"
startseq="ABC"
gsub(paste0("'.*",startseq,"'")  .*BCS","",a)
gsub(paste0("'.*",startseq,"'"),"",a)
gsub(paste0("'.*",startseq,"'"),"",a)
gsub(".*BCS","",a)
gsub("DDE.*","",a)
require(data.table)
matrix = fread(file.choose())
matrix
matrix = fread(file.choose(),header = FALSE)
matrix
matrix["V1","V2"]
matrix[1:2]
matrix[2]
matrix[1:22]
matrix[1:21]
n = matrix[1:21]
n
ns = data.frame(n$V1,n$V2)
ns
ns = data.frame("first" = n$V1,"second" = n$V2)
ns
first$two[which(first$one=="GGT")]
ns$second[which(ns$first=="GGT")]
ns$first = as.string ns$first
ns$first = as.string(ns$first)
ns$first = tostring(ns$first)
ns$first = toString(ns$first)
ns$second = toString(ns$second)
ns
ns = data.frame("first" = n$V1,"second" = n$V2)
ns
which(ns$first=="CCT")
which(ns$first=="AAC")
m = c("AAC","SJD","AAC")
which(m=="AAC")
which(m=="AAC")[1]
which(m=="AAC")[2]
length(which(m=="AAC"))
sample(which(m=="AAC"),1)
sample(which(m=="AAC"),1)
sample(which(m=="AAC"),1)
sample(which(m=="AAC"),1)
pos1 = gregexpr("BCS",a)[[1]][1]
pos1
mutator <- function(sequence, n=10){
#start/stop codings
pos1 = gregexpr("BCS",sequence)[[1]][1]
seq = gsub(".*BCS","",sequence)
pos2 = gregexpr("DEF",a)
seq = gsub("DDE.*","",seq)
seq = seq[seq != ""]
b = substring(seq, seq(1,nchar(seq),3), seq(3,nchar(seq),3))
y = sample(b,n)
for(i in y){
x = sample(which(y==b), 1)
if(!b[x] %in% ns$first){
if(b[x] %in% ns$second) b[x] = ns$first[ns$second == b[x]]
} else {
b[x] = ns$second[ns$first == b[x]]
}
}
return(b)
}
mutator(a)
mutator <- function(sequence, n=10){
#start/stop codings
pos1 = gregexpr("BCS",sequence)[[1]][1]
seq = gsub(".*BCS","",sequence)
pos2 = gregexpr("DEF",a)
seq = gsub("DDE.*","",seq)
seq = seq[seq != ""]
b = substring(seq, seq(1,nchar(seq),3), seq(3,nchar(seq),3))
y = sample(b,n)
# for(i in y){
#   x = sample(which(y==b), 1)
#   if(!b[x] %in% ns$first){
#     if(b[x] %in% ns$second) b[x] = ns$first[ns$second == b[x]]
#   } else {
#     b[x] = ns$second[ns$first == b[x]]
#   }
# }
return(b)
}
a = "ABCSJWEJAJKSDJKSAKDDEF"
mutator(a)
mutator <- function(sequence, n=10){
#start/stop codings
pos1 = gregexpr("BCS",sequence)[[1]][1]
seq = gsub(".*BCS","",sequence)
pos2 = gregexpr("DEF",seq)
seq = gsub("DDE.*","",seq)
seq = seq[seq != ""]
b = substring(seq, seq(1,nchar(seq),3), seq(3,nchar(seq),3))
y = sample(b,n)
# for(i in y){
#   x = sample(which(y==b), 1)
#   if(!b[x] %in% ns$first){
#     if(b[x] %in% ns$second) b[x] = ns$first[ns$second == b[x]]
#   } else {
#     b[x] = ns$second[ns$first == b[x]]
#   }
# }
return(b)
}
mutator(a)
shiny::runApp('FireData/shiny')
